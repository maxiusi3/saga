version: '3.8'

services:
  postgres-test:
    image: postgres:14-alpine
    container_name: saga-postgres-test
    environment:
      POSTGRES_DB: saga_test
      POSTGRES_USER: saga_test_user
      POSTGRES_PASSWORD: saga_test_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ./packages/backend/migrations:/docker-entrypoint-initdb.d/migrations:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U saga_test_user -d saga_test"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - saga-test-network

  redis-test:
    image: redis:7-alpine
    container_name: saga-redis-test
    ports:
      - "6380:6379"
    volumes:
      - redis_test_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - saga-test-network

  backend-test:
    build:
      context: .
      dockerfile: packages/backend/Dockerfile
      target: development
    container_name: saga-backend-test
    environment:
      NODE_ENV: test
      PORT: 3001
      DATABASE_URL: postgresql://saga_test_user:saga_test_password@postgres-test:5432/saga_test
      REDIS_URL: redis://redis-test:6379
      JWT_SECRET: test-jwt-secret-key-for-testing-only
      CORS_ORIGIN: http://localhost:3000,http://localhost:3002
      # Test API keys (use dummy values for testing)
      OPENAI_API_KEY: test-openai-key
      STRIPE_SECRET_KEY: sk_test_dummy_key
      SENDGRID_API_KEY: test-sendgrid-key
      AWS_ACCESS_KEY_ID: test-access-key
      AWS_SECRET_ACCESS_KEY: test-secret-key
      AWS_REGION: us-east-1
      AWS_S3_BUCKET: saga-test-bucket
    ports:
      - "3002:3001"
    volumes:
      - ./packages/backend/src:/app/src:ro
      - ./packages/shared:/app/packages/shared:ro
      - backend_test_node_modules:/app/node_modules
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - saga-test-network
    restart: unless-stopped

  web-test:
    build:
      context: .
      dockerfile: packages/web/Dockerfile
      target: development
    container_name: saga-web-test
    environment:
      NODE_ENV: test
      NEXT_PUBLIC_API_URL: http://localhost:3002
      NEXT_PUBLIC_WS_URL: http://localhost:3002
      NEXT_PUBLIC_ENVIRONMENT: test
    ports:
      - "3003:3000"
    volumes:
      - ./packages/web/src:/app/src:ro
      - ./packages/shared:/app/packages/shared:ro
      - web_test_node_modules:/app/node_modules
    depends_on:
      backend-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - saga-test-network
    restart: unless-stopped

  # Test runner service for automated testing
  test-runner:
    build:
      context: .
      dockerfile: packages/backend/Dockerfile
      target: development
    container_name: saga-test-runner
    environment:
      NODE_ENV: test
      DATABASE_URL: postgresql://saga_test_user:saga_test_password@postgres-test:5432/saga_test
      REDIS_URL: redis://redis-test:6379
      API_URL: http://backend-test:3001
      WEB_URL: http://web-test:3000
    volumes:
      - ./packages:/app/packages:ro
      - ./scripts:/app/scripts:ro
      - test_results:/app/test-results
    depends_on:
      backend-test:
        condition: service_healthy
      web-test:
        condition: service_healthy
    networks:
      - saga-test-network
    profiles:
      - testing
    command: ["npm", "run", "test:all"]

  # Nginx reverse proxy for test environment
  nginx-test:
    image: nginx:alpine
    container_name: saga-nginx-test
    ports:
      - "8080:80"
    volumes:
      - ./nginx/test.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend-test
      - web-test
    networks:
      - saga-test-network
    restart: unless-stopped

volumes:
  postgres_test_data:
    driver: local
  redis_test_data:
    driver: local
  backend_test_node_modules:
    driver: local
  web_test_node_modules:
    driver: local
  test_results:
    driver: local

networks:
  saga-test-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16