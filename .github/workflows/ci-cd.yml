name: CI/CD Pipeline (Disabled)

on:
  workflow_dispatch:  # Only allow manual trigger

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
  API_REPOSITORY: saga-api
  WEB_REPOSITORY: saga-web

jobs:
  # Test jobs run in parallel
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: saga_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run backend linting
        run: npm run lint --workspace=packages/backend

      - name: Run backend type checking
        run: npm run type-check --workspace=packages/backend

      - name: Run backend unit tests
        run: npm run test --workspace=packages/backend
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/saga_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret
          
      - name: Run backend integration tests
        run: npm run test:integration --workspace=packages/backend
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/saga_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret

      - name: Upload backend coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./packages/backend/coverage/lcov.info
          flags: backend

  test-web:
    name: Test Web Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run web linting
        run: npm run lint --workspace=packages/web

      - name: Run web type checking
        run: npm run type-check --workspace=packages/web

      - name: Run web unit tests
        run: npm run test --workspace=packages/web
        env:
          NODE_ENV: test

      - name: Build web application
        run: npm run build --workspace=packages/web
        env:
          NODE_ENV: production
          NEXT_PUBLIC_API_URL: https://api.example.com

      - name: Upload web coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./packages/web/coverage/lcov.info
          flags: web

  test-mobile:
    name: Test Mobile App
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run mobile linting
        run: npm run lint --workspace=packages/mobile

      - name: Run mobile type checking
        run: npm run type-check --workspace=packages/mobile

      - name: Run mobile unit tests
        run: npm run test --workspace=packages/mobile
        env:
          NODE_ENV: test

      - name: Upload mobile coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./packages/mobile/coverage/lcov.info
          flags: mobile

  test-shared:
    name: Test Shared Package
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run shared linting
        run: npm run lint --workspace=packages/shared

      - name: Run shared type checking
        run: npm run type-check --workspace=packages/shared

      - name: Run shared unit tests
        run: npm run test --workspace=packages/shared

      - name: Upload shared coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./packages/shared/coverage/lcov.info
          flags: shared

  # E2E tests run after unit tests pass
  test-e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-web, test-mobile, test-shared]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: saga_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build applications
        run: |
          npm run build --workspace=packages/shared
          npm run build --workspace=packages/backend
          npm run build --workspace=packages/web

      - name: Start backend server
        run: |
          npm run start --workspace=packages/backend &
          sleep 10
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/saga_e2e
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret
          PORT: 3001

      - name: Start web server
        run: |
          npm run start --workspace=packages/web &
          sleep 10
        env:
          NODE_ENV: production
          NEXT_PUBLIC_API_URL: http://localhost:3001
          PORT: 3000

      - name: Run E2E tests
        run: npm run test:e2e --workspace=packages/web
        env:
          BASE_URL: http://localhost:3000
          API_URL: http://localhost:3001

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: e2e-test-results
          path: packages/web/test-results/

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [test-backend, test-web, test-mobile, test-shared]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=high

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run CodeQL analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Perform CodeQL analysis
        uses: github/codeql-action/analyze@v2

  # Build and push Docker images (only on main branch)
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [test-backend, test-web, test-mobile, test-shared, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/backend/Dockerfile.production
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.API_REPOSITORY }}-${{ github.event.repository.name }}:latest
            ${{ env.ECR_REGISTRY }}/${{ env.API_REPOSITORY }}-${{ github.event.repository.name }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Build and push Web image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/web/Dockerfile.production
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.WEB_REPOSITORY }}-${{ github.event.repository.name }}:latest
            ${{ env.ECR_REGISTRY }}/${{ env.WEB_REPOSITORY }}-${{ github.event.repository.name }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  # Deploy to staging environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to staging
        run: |
          # Update ECS services with new images
          aws ecs update-service \
            --cluster saga-cluster-staging \
            --service saga-api-staging \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

          aws ecs update-service \
            --cluster saga-cluster-staging \
            --service saga-web-staging \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster saga-cluster-staging \
            --services saga-api-staging saga-web-staging \
            --region ${{ env.AWS_REGION }}

      - name: Run smoke tests
        run: |
          # Get ALB DNS name
          ALB_DNS=$(aws cloudformation describe-stacks \
            --stack-name SagaInfrastructure-staging \
            --query 'Stacks[0].Outputs[?OutputKey==`LoadBalancerDNS`].OutputValue' \
            --output text \
            --region ${{ env.AWS_REGION }})
          
          # Test health endpoints
          curl -f "http://$ALB_DNS/api/health" || exit 1
          curl -f "http://$ALB_DNS" || exit 1

  # Deploy to production environment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, test-e2e]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Run database migrations
        run: |
          # Get database connection info
          DB_ENDPOINT=$(aws cloudformation describe-stacks \
            --stack-name SagaInfrastructure-production \
            --query 'Stacks[0].Outputs[?OutputKey==`DatabaseEndpoint`].OutputValue' \
            --output text \
            --region ${{ env.AWS_REGION }})
          
          # Get database credentials
          DB_CREDENTIALS=$(aws secretsmanager get-secret-value \
            --secret-id saga-database-production \
            --region ${{ env.AWS_REGION }} \
            --query 'SecretString' \
            --output text)
          
          DB_USERNAME=$(echo $DB_CREDENTIALS | jq -r '.username')
          DB_PASSWORD=$(echo $DB_CREDENTIALS | jq -r '.password')
          
          # Run migrations
          export DATABASE_URL="postgresql://$DB_USERNAME:$DB_PASSWORD@$DB_ENDPOINT:5432/saga"
          cd packages/backend
          npx knex migrate:latest

      - name: Deploy to production
        run: |
          # Update ECS services with new images
          aws ecs update-service \
            --cluster saga-cluster-production \
            --service saga-api-production \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

          aws ecs update-service \
            --cluster saga-cluster-production \
            --service saga-web-production \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster saga-cluster-production \
            --services saga-api-production saga-web-production \
            --region ${{ env.AWS_REGION }}

      - name: Run smoke tests
        run: |
          # Get ALB DNS name
          ALB_DNS=$(aws cloudformation describe-stacks \
            --stack-name SagaInfrastructure-production \
            --query 'Stacks[0].Outputs[?OutputKey==`LoadBalancerDNS`].OutputValue' \
            --output text \
            --region ${{ env.AWS_REGION }})
          
          # Test health endpoints
          curl -f "http://$ALB_DNS/api/health" || exit 1
          curl -f "http://$ALB_DNS" || exit 1

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          text: '🚀 Production deployment successful!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          text: '❌ Production deployment failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Rollback job (manual trigger)
  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: production

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Rollback services
        run: |
          # Get previous task definition
          CURRENT_API_TASK=$(aws ecs describe-services \
            --cluster saga-cluster-production \
            --services saga-api-production \
            --query 'services[0].taskDefinition' \
            --output text)
          
          CURRENT_WEB_TASK=$(aws ecs describe-services \
            --cluster saga-cluster-production \
            --services saga-web-production \
            --query 'services[0].taskDefinition' \
            --output text)
          
          # Get previous revision
          API_FAMILY=$(echo $CURRENT_API_TASK | cut -d':' -f6)
          API_REVISION=$(echo $CURRENT_API_TASK | cut -d':' -f7)
          PREV_API_REVISION=$((API_REVISION - 1))
          
          WEB_FAMILY=$(echo $CURRENT_WEB_TASK | cut -d':' -f6)
          WEB_REVISION=$(echo $CURRENT_WEB_TASK | cut -d':' -f7)
          PREV_WEB_REVISION=$((WEB_REVISION - 1))
          
          # Update services to previous revision
          aws ecs update-service \
            --cluster saga-cluster-production \
            --service saga-api-production \
            --task-definition "$API_FAMILY:$PREV_API_REVISION"
          
          aws ecs update-service \
            --cluster saga-cluster-production \
            --service saga-web-production \
            --task-definition "$WEB_FAMILY:$PREV_WEB_REVISION"

      - name: Wait for rollback
        run: |
          aws ecs wait services-stable \
            --cluster saga-cluster-production \
            --services saga-api-production saga-web-production \
            --region ${{ env.AWS_REGION }}

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "🔄 Production rollback completed",
              attachments: [{
                color: "warning",
                fields: [{
                  title: "Environment",
                  value: "Production",
                  short: true
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}