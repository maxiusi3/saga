name: Test Environment Deployment

on:
  push:
    branches: [ develop, feature/* ]
  pull_request:
    branches: [ develop, main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'test'
        type: choice
        options:
        - test
        - staging

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '18'

jobs:
  # Run tests before deployment
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: saga_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run type checking
      run: npm run type-check
    
    - name: Run backend tests
      run: |
        cd packages/backend
        npm test -- --coverage --passWithNoTests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/saga_test
        REDIS_URL: redis://localhost:6379
        NODE_ENV: test
    
    - name: Run web tests
      run: |
        cd packages/web
        npm test -- --coverage --passWithNoTests --watchAll=false
      env:
        NODE_ENV: test
    
    - name: Run shared tests
      run: |
        cd packages/shared
        npm test -- --coverage --passWithNoTests
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./coverage
        flags: unittests
        name: codecov-umbrella

  # Build and test Docker images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: packages/backend/Dockerfile.production
        push: false
        tags: saga-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build web image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: packages/web/Dockerfile.production
        push: false
        tags: saga-web:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker images
      run: |
        # Test backend image
        docker run --rm -d --name test-backend \
          -e NODE_ENV=test \
          -e DATABASE_URL=postgresql://test:test@localhost:5432/test \
          -p 3001:3001 \
          saga-backend:test
        
        # Wait for backend to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:3001/health || exit 1
        
        # Stop container
        docker stop test-backend

  # Deploy to test environment
  deploy-test:
    name: Deploy to Test Environment
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    environment: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install AWS CDK
      run: npm install -g aws-cdk
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: packages/backend/Dockerfile.production
        push: true
        tags: ${{ steps.login-ecr.outputs.registry }}/saga-api-test:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push web image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: packages/web/Dockerfile.production
        push: true
        tags: ${{ steps.login-ecr.outputs.registry }}/saga-web-test:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Deploy infrastructure
      run: |
        cd infrastructure
        npm ci
        cdk deploy saga-test-stack --context environment=test --require-approval never
      env:
        CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
        CDK_DEFAULT_REGION: ${{ env.AWS_REGION }}
    
    - name: Update ECS services
      run: |
        # Get cluster name
        CLUSTER_NAME=$(aws cloudformation describe-stacks \
          --stack-name saga-test-stack \
          --query 'Stacks[0].Outputs[?OutputKey==`ClusterName`].OutputValue' \
          --output text)
        
        # Update API service
        aws ecs update-service \
          --cluster $CLUSTER_NAME \
          --service saga-api-test \
          --task-definition saga-api-test \
          --force-new-deployment
        
        # Update Web service
        aws ecs update-service \
          --cluster $CLUSTER_NAME \
          --service saga-web-test \
          --task-definition saga-web-test \
          --force-new-deployment
    
    - name: Run database migrations
      run: ./scripts/migrate-database.sh test
    
    - name: Wait for deployment
      run: |
        # Get cluster name
        CLUSTER_NAME=$(aws cloudformation describe-stacks \
          --stack-name saga-test-stack \
          --query 'Stacks[0].Outputs[?OutputKey==`ClusterName`].OutputValue' \
          --output text)
        
        # Wait for services to be stable
        aws ecs wait services-stable \
          --cluster $CLUSTER_NAME \
          --services saga-api-test saga-web-test
    
    - name: Run deployment validation
      run: ./infrastructure/scripts/deployment-validation.sh test
    
    - name: Run smoke tests
      run: |
        # Get load balancer DNS
        ALB_DNS=$(aws cloudformation describe-stacks \
          --stack-name saga-test-stack \
          --query 'Stacks[0].Outputs[?OutputKey==`LoadBalancerDNS`].OutputValue' \
          --output text)
        
        export TEST_API_URL="http://$ALB_DNS"
        ./scripts/test-api.sh
    
    - name: Notify deployment success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: |
          🚀 Test environment deployment successful!
          
          Environment: test
          Commit: ${{ github.sha }}
          Branch: ${{ github.ref_name }}
          
          URLs:
          - Application: http://${{ steps.get-alb-dns.outputs.dns }}
          - Health Check: http://${{ steps.get-alb-dns.outputs.dns }}/health
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Notify deployment failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: |
          ❌ Test environment deployment failed!
          
          Environment: test
          Commit: ${{ github.sha }}
          Branch: ${{ github.ref_name }}
          
          Please check the GitHub Actions logs for details.
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Run E2E tests against deployed environment
  e2e-tests:
    name: Run E2E Tests
    runs-on: ubuntu-latest
    needs: deploy-test
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Get application URL
      id: get-url
      run: |
        ALB_DNS=$(aws cloudformation describe-stacks \
          --stack-name saga-test-stack \
          --query 'Stacks[0].Outputs[?OutputKey==`LoadBalancerDNS`].OutputValue' \
          --output text)
        echo "url=http://$ALB_DNS" >> $GITHUB_OUTPUT
    
    - name: Install Playwright
      run: npx playwright install --with-deps
    
    - name: Run E2E tests
      run: npm run test:e2e
      env:
        BASE_URL: ${{ steps.get-url.outputs.url }}
        TEST_USER_EMAIL: test@saga.app
        TEST_USER_PASSWORD: TestPassword123!
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: |
          packages/web/test-results/
          packages/web/playwright-report/
        retention-days: 7

  # Security scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: deploy-test
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Get application URL
      id: get-url
      run: |
        ALB_DNS=$(aws cloudformation describe-stacks \
          --stack-name saga-test-stack \
          --query 'Stacks[0].Outputs[?OutputKey==`LoadBalancerDNS`].OutputValue' \
          --output text)
        echo "url=http://$ALB_DNS" >> $GITHUB_OUTPUT
    
    - name: Run security audit
      run: ./infrastructure/scripts/security-audit.sh test ${{ steps.get-url.outputs.url }}
    
    - name: Run penetration test
      run: ./infrastructure/scripts/penetration-test.sh test ${{ steps.get-url.outputs.url }}
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          security-audit-*.txt
          pentest-report-*.txt
        retention-days: 30