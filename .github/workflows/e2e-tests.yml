name: E2E Tests (Disabled)

on:
  workflow_dispatch:  # Only allow manual trigger
  schedule:
    # Run E2E tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  web-e2e:
    name: Web E2E Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: saga_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup test database
      run: |
        cd packages/backend
        npm run db:migrate
        npm run db:seed
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/saga_test
        REDIS_URL: redis://localhost:6379

    - name: Start backend server
      run: |
        cd packages/backend
        npm run dev &
        sleep 10
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/saga_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    - name: Install Playwright browsers
      run: |
        cd packages/web
        npx playwright install --with-deps

    - name: Start web application
      run: |
        cd packages/web
        npm run build
        npm run start &
        sleep 10
      env:
        NODE_ENV: test
        NEXT_PUBLIC_API_URL: http://localhost:3001

    - name: Run Playwright tests
      run: |
        cd packages/web
        npx playwright test
      env:
        BASE_URL: http://localhost:3000
        API_URL: http://localhost:3001

    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: packages/web/playwright-report/
        retention-days: 30

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: web-e2e-results
        path: packages/web/test-results/
        retention-days: 30

  mobile-e2e-ios:
    name: Mobile E2E Tests (iOS)
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup iOS Simulator
      run: |
        xcrun simctl create "iPhone 14" "iPhone 14" "iOS16.0"
        xcrun simctl boot "iPhone 14"

    - name: Install Detox CLI
      run: npm install -g detox-cli

    - name: Build iOS app for testing
      run: |
        cd packages/mobile
        npx detox build --configuration ios.sim.debug

    - name: Run Detox tests
      run: |
        cd packages/mobile
        npx detox test --configuration ios.sim.debug --cleanup

    - name: Upload mobile test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: mobile-ios-e2e-results
        path: packages/mobile/e2e/test-results/
        retention-days: 30

  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: saga_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup test database
      run: |
        cd packages/backend
        npm run db:migrate
        npm run db:seed
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/saga_test

    - name: Start services
      run: |
        cd packages/backend
        npm run dev &
        cd ../web
        npm run build
        npm run start &
        sleep 15
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/saga_test

    - name: Install Playwright browsers
      run: |
        cd packages/web
        npx playwright install --with-deps

    - name: Run accessibility tests
      run: |
        cd packages/web
        npx playwright test e2e/accessibility --reporter=html
      env:
        BASE_URL: http://localhost:3000

    - name: Upload accessibility report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: accessibility-report
        path: packages/web/playwright-report/
        retention-days: 30

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: saga_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup test database
      run: |
        cd packages/backend
        npm run db:migrate
        npm run db:seed
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/saga_test

    - name: Start services
      run: |
        cd packages/backend
        npm run dev &
        cd ../web
        npm run build
        npm run start &
        sleep 15
      env:
        NODE_ENV: production
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/saga_test

    - name: Install Playwright browsers
      run: |
        cd packages/web
        npx playwright install --with-deps

    - name: Run performance tests
      run: |
        cd packages/web
        npx playwright test e2e/performance --reporter=html
      env:
        BASE_URL: http://localhost:3000

    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli@0.12.x

    - name: Run Lighthouse CI
      run: |
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

    - name: Upload performance report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-report
        path: packages/web/playwright-report/
        retention-days: 30

  visual-regression:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: saga_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup test database
      run: |
        cd packages/backend
        npm run db:migrate
        npm run db:seed
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/saga_test

    - name: Start services
      run: |
        cd packages/backend
        npm run dev &
        cd ../web
        npm run build
        npm run start &
        sleep 15
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/saga_test

    - name: Install Playwright browsers
      run: |
        cd packages/web
        npx playwright install --with-deps

    - name: Run visual regression tests
      run: |
        cd packages/web
        npx playwright test e2e/visual --reporter=html
      env:
        BASE_URL: http://localhost:3000

    - name: Upload visual test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: visual-regression-report
        path: packages/web/playwright-report/
        retention-days: 30

    - name: Upload screenshots
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: visual-regression-screenshots
        path: packages/web/test-results/
        retention-days: 30

  cross-platform-sync:
    name: Cross-Platform Synchronization Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: saga_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup test database
      run: |
        cd packages/backend
        npm run db:migrate
        npm run db:seed
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/saga_test
        REDIS_URL: redis://localhost:6379

    - name: Start backend server
      run: |
        cd packages/backend
        npm run dev &
        sleep 10
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/saga_test
        REDIS_URL: redis://localhost:6379

    - name: Start web application
      run: |
        cd packages/web
        npm run build
        npm run start &
        sleep 10
      env:
        NODE_ENV: test

    - name: Install Playwright browsers
      run: |
        cd packages/web
        npx playwright install --with-deps

    - name: Run cross-platform synchronization tests
      run: |
        cd packages/web
        npx playwright test e2e/cross-platform --reporter=html
      env:
        BASE_URL: http://localhost:3000
        API_URL: http://localhost:3001

    - name: Upload sync test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cross-platform-sync-report
        path: packages/web/playwright-report/
        retention-days: 30

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [web-e2e, mobile-e2e-ios, accessibility-tests, performance-tests, visual-regression, cross-platform-sync]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Generate test summary
      run: |
        echo "# E2E Test Results Summary" > test-summary.md
        echo "" >> test-summary.md
        echo "## Test Execution Date" >> test-summary.md
        echo "$(date)" >> test-summary.md
        echo "" >> test-summary.md
        
        echo "## Test Results" >> test-summary.md
        echo "- Web E2E Tests: ${{ needs.web-e2e.result }}" >> test-summary.md
        echo "- Mobile E2E Tests (iOS): ${{ needs.mobile-e2e-ios.result }}" >> test-summary.md
        echo "- Accessibility Tests: ${{ needs.accessibility-tests.result }}" >> test-summary.md
        echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> test-summary.md
        echo "- Visual Regression Tests: ${{ needs.visual-regression.result }}" >> test-summary.md
        echo "- Cross-Platform Sync Tests: ${{ needs.cross-platform-sync.result }}" >> test-summary.md
        echo "" >> test-summary.md
        
        echo "## Artifacts" >> test-summary.md
        echo "Test reports and artifacts are available in the workflow run." >> test-summary.md

    - name: Upload test summary
      uses: actions/upload-artifact@v4
      with:
        name: test-summary
        path: test-summary.md
        retention-days: 30

    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('test-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });